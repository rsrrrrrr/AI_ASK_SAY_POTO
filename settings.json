import base64
from gtts import gTTS
import speech_recognition as sr
import os

# Convert color to 16-bit binary
def color_to_binary(r, g, b):
    # Check if the provided values are within the 16-bit range
    if not all(0 <= val <= 65535 for val in (r, g, b)):
        raise ValueError("All color values must be in the range 0-65535")

    # Convert each color channel to 16-bit binary
    r_bin = format(r, '016b')
    g_bin = format(g, '016b')
    b_bin = format(b, '016b')

    # Combine the binary values
    color_bin = r_bin + g_bin + b_bin

    return color_bin

# Convert binary to Base64 encoded ASCII text
def binary_to_text(binary):
    bytes_repr = int(binary, 2).to_bytes(len(binary) // 8, byteorder='big')
    encoded = base64.b64encode(bytes_repr).decode('ascii')
    return encoded

# Save the text to a file
def save_to_file(text, filename="color.txt"):
    with open(filename, "w") as f:
        f.write(text)

# Convert text to speech
def text_to_speech(text, lang='en'):
    tts = gTTS(text=text, lang=lang)
    tts.save('output.mp3')

# Recognize speech from mic
def recognize_speech_from_mic(recognizer, microphone):
    with microphone as source:
        print("Listening...")
        audio = recognizer.listen(source)

    try:
        print("Recognizing...")
        return recognizer.recognize_google(audio)
    except sr.UnknownValueError:
        print("Google Speech Recognition could not understand audio")
    except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))

# Synthesize text to speech
def synthesize_text_to_speech(text, lang='en', slow=False):
    speech = gTTS(text=text, lang=lang, slow=slow)
    speech.save("output.mp3")
    os.system("mpg123 output.mp3")

# Main code
def main():
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    text = recognize_speech_from_mic(recognizer, mic)
    synthesize_text_to_speech(text)

    # Convert color to binary
    binary_color = color_to_binary(65535, 32767, 16383)

    # Convert binary to text
    text_color = binary_to_text(binary_color)
    print(text_color)

    # Save text to file
    save_to_file(text_color)

if __name__ == "__main__":
    main()
from kivy.app import App
from kivy.uix.camera import Camera
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from google.cloud import vision
from google.cloud.vision import types
import os
import io
import random
from gtts import gTTS

class MainApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical')

        # Create a camera object
        self.camera_object = Camera(play=True)
        layout.add_widget(self.camera_object)

        # Create a button to take picture
        self.capture_button = Button(text="Take Picture")
        self.capture_button.size_hint=(.5, .2)
        self.capture_button.pos_hint={'x': .25, 'y': .75}
        self.capture_button.bind(on_press=self.on_capture)
        layout.add_widget(self.capture_button)

        # Create a label to display recognized text
        self.result_label = Label()
        layout.add_widget(self.result_label)

        return layout

    def on_capture(self, *args):
        # Capture the image from the camera
        self.camera_object.export_to_png('captured_image.png')

        # After capturing the image, process it with Google Cloud Vision API
        client = vision.ImageAnnotatorClient()

        with io.open('captured_image.png', 'rb') as image_file:
            content = image_file.read()

        image = types.Image(content=content)
        response = client.text_detection(image=image)
        texts = response.text_annotations

        result_text = 'Texts:\n'
        for text in texts:
            result_text += '"{}"\n'.format(text.description)
            vertices = (['({},{})'.format(vertex.x, vertex.y)
                        for vertex in text.bounding_poly.vertices])
            result_text += 'bounds: {}\n'.format(','.join(vertices))

        # Update the result label
        self.result_label.text = result_text

        # Save the text to a file
        with open("extracted_text.txt", "w") as f:
            for text in texts:
                f.write("{}\n".format(text.description))

        # Analyze the recognized text and provide information
        self.analyze_and_respond(texts)

    def analyze_and_respond(self, texts):
        # This is a simple example that provides a random answer if the recognized text contains a question mark
        for text in texts:
            if '?' in text.description:
                answers = ["Yes", "No", "Maybe", "I don't know"]
                answer = random.choice(answers)
                self.result_label.text += "\nAnswer: {}".format(answer)
                text_to_speech(answer)
                break

def text_to_speech(text):
    # Convert text to speech
    tts = gTTS(text=text, lang='en')
    tts.save('output.mp3')
    os.system("mpg123 output.mp3")

if __name__ == "__main__":
    MainApp().run()
